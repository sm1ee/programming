temp

#pragma once
#include "MyHeader.h"
#include "ImgManager.h"
#define FOUR 4
#define MAX_INVEN 25


class InventoryManager{
private:

	static InventoryManager *Inven_Obj;
	enum INVENTORY{
		IN_WINDOWS,
		IN_ITEM,
		IN_MAX_SIZE
	};

	enum ITEMS{
		IT_CAKE,
		IT_DDUK,
		IT_EGG,
		IT_PUMKIN,
		IT_TUNA,
		IT_MAX_SiZE
	};



	HBITMAP WINDOWS = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].bitmap); //인벤토리창 출력
	HBITMAP CAKE = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[ITEMS::IT_CAKE].bitmap); //아이템
	HBITMAP DDUK = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[ITEMS::IT_DDUK].bitmap); //아이템
	HBITMAP EGG = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[ITEMS::IT_EGG].bitmap); //아이템
	HBITMAP PUMKIN = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[ITEMS::IT_PUMKIN].bitmap); //아이템
	HBITMAP TUNA = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[ITEMS::IT_TUNA].bitmap); //아이템



	IMG_VEC* imgVecInventory[INVENTORY::IN_MAX_SIZE];

	int Is_Click_Count;

	bool check;
	HDC sub_dc;
	HDC Mem_DC;

	int Pos_x;
	int Pos_y;

	InventoryManager(){
		std::string tmp;

		this->imgVecInventory[INVENTORY::IN_WINDOWS] = ImgManager::Get_ImgManager()->setSprite("./Image/Windows");
		this->imgVecInventory[INVENTORY::IN_ITEM] = ImgManager::Get_ImgManager()->setSprite("./Image/Item");
		this->check = false;
		sub_dc = NULL;
		Mem_DC = NULL;
	}

	~InventoryManager(){}

public:

	//번호 보고 비트맵 정보를 넘겨줌


	struct Inven_Window{
		//24칸에 아이템 다섯개이므로 각 칸에 배열에 0~4까지 숫자 넣을 수 있음
		static int Take_Item[MAX_INVEN];

		//아이템 종류에 따른 비트맵 정보를 저장   
		//0번째 칸은 인벤토리 창 
		static HBITMAP* ITEMBIT[MAX_INVEN];
	};

	typedef std::list<Inven_Window> WINVEC;
	std::list<Inven_Window> itor;
	WINVEC* Set_Inven(){

		//케릭터가 생성될때 
		WINVEC* _tmpin_win = NULL;
		_tmpin_win = new WINVEC();

		Inven_Window in_windat;

		memset(in_windat.Take_Item, 0, MAX_INVEN);
		memset(in_windat.ITEMBIT, 0, MAX_INVEN);
		in_windat.ITEMBIT[0] = (HBITMAP*)WINDOWS;
		(*_tmpin_win).push_back(in_windat);

		return _tmpin_win; //자기 인벤토리의 주소 리턴
	}

	void Get_Item(WINVEC* My_Item, int Ident_Item){




		//std::list<Inven_Window>::iterator itor = My_Item->begin();
		for (int i = 1; i < MAX_INVEN; i++){
			if (Ident_Item == 1)
				My_Item->begin()->ITEMBIT[i] = (HBITMAP*)CAKE;
			else if (Ident_Item == 2)
				My_Item->begin()->ITEMBIT[i] = (HBITMAP*)DDUK;
			else if (Ident_Item == 3)
				My_Item->begin()->ITEMBIT[i] = (HBITMAP*)EGG;
			else if (Ident_Item == 4)
				My_Item->begin()->ITEMBIT[i] = (HBITMAP*)PUMKIN;
			else if (Ident_Item == 5)
				My_Item->begin()->ITEMBIT[i] = (HBITMAP*)TUNA;
		}
	}

	void Use_Item(WINVEC* My_Item){


	}


	static InventoryManager *Get_InventoryManager(){
		if (!Inven_Obj){
			Inven_Obj = new InventoryManager();
		}

		return Inven_Obj;
	}

	void Set_Dc(HDC _dc){
		this->Mem_DC = _dc;
		this->sub_dc = CreateCompatibleDC(_dc);
	}
	void Input_State(SHORT _Key_Value){
		//if (_Key_Value == KEY_STATE::STATE_INVEN)

	}
	void Draw(){

		Pos_x = 700; //인벤토리 창 x 좌표 위치
		Pos_y = 200;//      "      y 좌표 위치

		//HBITMAP HoldBit = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].bitmap); //인벤토리창 출력
		/*
		HBITMAP HoldBit = (HBITMAP)My_Item->begin()->ITEMBIT[0];
		TransparentBlt(Mem_DC, Pos_x, Pos_y, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].width, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].height, sub_dc, 0, 0, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].width, (*imgVecInventory[INVENTORY::IN_WINDOWS])[INVENTORY::IN_WINDOWS].height, RGB(163, 73, 164));
		SelectObject(sub_dc, HoldBit);
*/
		Pos_x += 11; //첫 아이템 x 좌표 위치
		Pos_y += 52; //    "     y 좌표 위치
		int Count_Max = 0;

		for (int i = 0; i < MAX_INVEN; i++){ //아이템을 출력

			//InventoryManager::Inven_Window::ITEMBIT[0] = (HBITMAP*)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[i].bitmap); //쓰는 방법
			//HoldBit = (HBITMAP)SelectObject(sub_dc, (*imgVecInventory[INVENTORY::IN_ITEM])[i].bitmap); //아이템
			HBITMAP HoldBit = *InventoryManager::Inven_Window::ITEMBIT[i];
			TransparentBlt(Mem_DC, Pos_x, Pos_y, +(*imgVecInventory[INVENTORY::IN_ITEM])[i].width, (*imgVecInventory[INVENTORY::IN_ITEM])[i].height, sub_dc, 0, 0, (*imgVecInventory[INVENTORY::IN_ITEM])[i].width, (*imgVecInventory[INVENTORY::IN_ITEM])[i].height, RGB(163, 73, 164));
			SelectObject(sub_dc, HoldBit);
		}
		Count_Max++;

		if (Count_Max>3){ //한줄에 4칸인걸 세서 4가 넘어가면 다음 행으로 가주기 위해

			Count_Max = 0;
			Pos_x -= 108;
			Pos_y += 35;
		}

		else
			Pos_x += 36;

	}

};